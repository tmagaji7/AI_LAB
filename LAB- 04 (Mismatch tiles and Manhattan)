import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to this node
        self.h = 0  # Heuristic cost from this node to target
        self.f = 0  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    # Manhattan distance
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal, grid):
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        # Goal check
        if current_node.position == goal:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Generate neighbors
        neighbors = [
            (current_node.position[0] + dx, current_node.position[1] + dy)
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]
        ]

        for next_position in neighbors:
            # Check if within bounds and not a wall (assuming 0 is free space)
            if (0 <= next_position[0] < len(grid) and
                    0 <= next_position[1] < len(grid[0]) and
                    grid[next_position[0]][next_position[1]] == 0):

                if next_position in closed_list:
                    continue

                neighbor_node = Node(next_position, current_node)
                neighbor_node.g = current_node.g + 1
                neighbor_node.h = heuristic(next_position, goal)
                neighbor_node.f = neighbor_node.g + neighbor_node.h

                # Check if this neighbor is already in the open list
                if any(neighbor.position == neighbor_node.position and neighbor.f <= neighbor_node.f for neighbor in open_list):
                    continue

                heapq.heappush(open_list, neighbor_node)

    return []  # Return empty path if no path found

# Example usage
if __name__ == "__main__":
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)
    goal = (4, 4)
    path = astar(start, goal, grid)

    print("Path from start to goal:", path)
    print("Tarun MM")
    print("1BM22CS306")
