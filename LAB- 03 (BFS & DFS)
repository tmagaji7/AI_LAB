from collections import deque

# Define the goal state
GOAL_STATE = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]

def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up

    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]  # create a copy
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)

    return neighbors

def bfs(start_state):
    start_tuple = tuple(tuple(row) for row in start_state)
    goal_tuple = tuple(tuple(row) for row in GOAL_STATE)

    queue = deque([start_state])  # Use the list representation for the queue
    visited = {start_tuple: None}

    while queue:
        current_state = queue.popleft()

        if tuple(tuple(row) for row in current_state) == goal_tuple:
            break

        for neighbor in get_neighbors(current_state):
            neighbor_tuple = tuple(tuple(row) for row in neighbor)
            if neighbor_tuple not in visited:
                visited[neighbor_tuple] = current_state
                queue.append(neighbor)

    # Backtrack to find the solution path
    path = []
    while current_state is not None:
        path.append(current_state)
        current_state = visited[tuple(tuple(row) for row in current_state)]

    return path[::-1]  # Return reversed path

def print_solution(path):
    for state in path:
        for row in state:
            print(row)
        print()

# Example usage
start_state = [[2, 8, 3], [1, 6, 4], [7 ,0 ,5]]
solution_path = bfs(start_state)
print_solution(solution_path)
author_name = "Tarun M M"
roll_number = "1BM22CS306"
print(f"Author: {author_name}, Roll Number: {roll_number}")

